# Initialized `events.py` generated by ipm.
# Regists your text events and regist global variables here.# Documents at https://ipm.hydroroll.team/

from infini.register import Register
from importlib.metadata import version
from diceutils.cards import CardsPool
from diceutils.status import StatusPool
from typing import Optional

import platform
import psutil
import os

register = Register()

register.register_textevent(
    "dg.bot",
    "SDice v{{sdice_version}} based on NoctisDice v{{ version }} by Noctisynth [Python {{ py_version }} For Infini {{ infini_version }}]\n"
    "{{ welcome }}",
)
register.register_textevent("dg.bot.on", "一个成熟的调查员应当学会自己当骰娘.")
register.register_textevent("dg.bot.off", "好了，我走了.")
register.register_textevent(
    "dg.bot.status",
    "DicerGirl {{ dg_version }}, {{ '开启' if status else '关闭' }}\n"
    "骰娘尊名: {{ bot_name }}\n"
    "操作系统: {{ system_name }}\n"
    "CPU 核心: {{ cpu_count }} 核心\n"
    "Python 版本: {{ py_version }}\n"
    "Infini 版本: {{ infini_version }}\n"
    "SDice 版本: {{ sdice_version }}\n"
    "系统内存占用: {{ memi_rss }}MB/{{ memi_total }}GB\n"
    "漏洞检测模式: 你猜",
)
register.register_textevent(
    "dg.bot.name", "好好好, 以后我就叫“{{ name }}”了."
)

register.register_textevent(
    "dg.st", "收到, [{{ card_name }}]录卡完成, 成功录入属性{{ count }}个."
)
register.register_textevent(
    "dg.st.name", "哦? [{{ card_name }}]的新名字? 好吧, 莲记下了. //角色被命名为[{{ name }}]."
)
register.register_textevent(
    "dg.st.init",
    "[{{ card_name }}]角色卡已参照模板[{{ mode }}]初始化, 异世的诗篇就要开始了.",
)
register.register_textevent(
    "dg.st.card",
    "[{{ card_name }}]人物卡录入完成:\n{{ meta }}\n{{ basic }}",
)
register.register_textevent(
    "dg.st.not_found",
    "www, 没有找到[{{ card_name }}]缓存人物卡.",
)
register.register_textevent(
    "dg.st.failed", "唔... 你写了个啥? 咱没太看懂# 歪脑袋 //[{{ card_name }}]录卡失败, 请确保录入数据成对存在."
)


register.register_textevent(
    "dg.show",
    "让莲看看[{{ card_name }}]人物卡数据. 唔, 找到啦:\n"
    "{% for card in cards %}"
    "{% if card.sequence is defined %}序列[{{ card.sequence }}]卡:{% endif %}"
    "{% if card.meta is defined %}{{ card.meta }}\n{% endif %}"
    "{{ card.basic }}{% if not loop.last %}\n{% endif %}"
    "{% endfor %}",
)
register.register_textevent(
    "dg.show.attr",
    "[{{ card_name }}]{% for attr in attrs %}{{ attr.name }}: {{ attr.value }}{% endfor %}",
)
register.register_textevent(
    "dg.show.not_found",
    "你在开玩笑吧, [{{ card_name }}]查询的人物卡数据不存在.",
)

register.register_textevent(
    "dg.pc",
    "Noctis Player Character Manager v0.1.0-alpha.2 [Infini {{ infini_version }} for DicerGirl {{ version }}]\n"
    "欢迎使用 NPCM, 当前已为你存储[{{ count }}]个人物卡.",
)
register.register_textevent(
    "dg.pc.new", "[{{ card_name }}]新的角色卡已经创建, 新的旅途或许就要开始了."
)
register.register_textevent(
    "dg.pc.select", "[{{ card_name }}]选中角色卡序列[{{ sequence }}]."
)
register.register_textevent(
    "dg.pc.show.oversetp", "[{{ nickname }}]尝试选定的序列[{{ sequence }}]不存在."
)
register.register_textevent(
    "dg.pc.list",
    "[{{ nickname }}]"
    "{% if cards %}"
    "{{ bot_name }}为你存储的角色卡:\n"
    "{% for card in cards %}"
    "卡序列[{{ card.sequence }}]:{{ card.meta }}\n"
    "{% if loop.last %}当前正在使用卡序列[{{ selected_id }}], 使用`.pc show [ID]`来查询指定的人物卡.{% endif %}"
    "{% endfor %}"
    "{% else %}"
    "当前无存储的序列卡."
    "{% endif %}",
)
register.register_textevent(
    "dg.pc.list.cache",
    "[{{ nickname }}]"
    "{% if cards %}"
    "{{ bot_name }}为你缓存的角色卡:\n"
    "{% for card in cards %}"
    "卡序列[{{ card.sequence }}]:{{ card.meta }}\n"
    "{% if loop.last %}使用`.pc show [ID] cache`来查询指定的缓存人物卡.{% endif %}"
    "{% endfor %}"
    "{% else %}"
    "当前无存储的序列卡."
    "{% endif %}",
)
register.register_textevent(
    "dg.pc.show",
    "[{{ nickname }}]"
    "{% if cards %}"
    "{{ bot_name }}为你存储的角色卡:\n"
    "{% for card in cards %}"
    "卡序列[{{ card.sequence }}]:\n{{ card.meta }}\n{{ card.basic }}"
    "{% if not loop.last %}\n{% endif %}"
    "{% endfor %}"
    "{% else %}"
    "当前无存储的序列卡."
    "{% endif %}",
)
register.register_textevent(
    "dg.pc.show.cache",
    "[{{ nickname }}]"
    "{% if cards %}"
    "{{ bot_name }}为你缓存的角色卡:\n"
    "{% for card in cards %}"
    "卡序列[{{ card.sequence }}]:\n{{ card.meta }}\n{{ card.basic }}"
    "{% if not loop.last %}\n{% endif %}"
    "{% endfor %}"
    "{% else %}"
    "当前无存储的序列卡."
    "{% endif %}",
)
register.register_textevent(
    "dg.pc.clear", "[{{ nickname }}]已清空[{{ count }}]个人物卡."
)
register.register_textevent(
    "dg.pc.remove", "[{{ nickname }}]已删除人物卡序列[{{ sequence }}]."
)


register.register_variable(
    "welcome", "欢迎使用 Noctisynth DicerGirl, 我是莲, 请使用`.help 指令`查看指令帮助."
)
register.register_variable("version", "4.0.0-rc.4")
register.register_variable("sdice_version", "TEST_VERSION_0.1.0")
register.register_variable("py_version", platform.python_version())
register.register_variable("infini_version", version("infini"))
register.register_variable("cpu_count", psutil.cpu_count())
register.register_variable(
    "system_name",
    (
        platform.freedesktop_os_release()["PRETTY_NAME"]
        if os.name == "posix"
        else platform.platform()
    ),
)


@register.dynamic_variable("bot_name")
def bot_name():
    return StatusPool.get("dicergirl").get("bot", "name") or "DicerGirl"


@register.dynamic_variable("memi_rss")
def memi_rss():
    memi = psutil.Process().memory_info()
    return round(memi.rss / 1024 / 1024, 2)


@register.dynamic_variable("memi_total")
def memi_total():
    return round(psutil.virtual_memory().total / 1024 / 1024 / 1024, 2)


@register.dynamic_variable("card_name")
def card_name(
    user_id: Optional[str],
    group_id: Optional[str],
    session_id: Optional[str],
    nickname: Optional[str],
) -> str:
    status = StatusPool.get("dicergirl")
    cards = (
        CardsPool.get(
            status.get(group_id, "mode") or status.get(session_id, "mode") or "coc"
        )
        or {}
    )
    return (cards.get(user_id) or {}).get("name", nickname) or "用户"
